// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_graph
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-23, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-10-173-0-121`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/substrate
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_graph
// --extrinsic
// *
// --steps
// 50
// --repeat
// 10
// --output
// ./weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_graph.
pub trait WeightInfo {
	fn add_node(n: u32, ) -> Weight;
	fn follow_child_public() -> Weight;
	fn unfollow_child_public() -> Weight;
	fn private_graph_update(s: u32, ) -> Weight;
	fn change_page_number() -> Weight;
}

/// Weights for pallet_graph using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Graph Nodes (r:1 w:1)
	// Storage: Graph NodeCount (r:1 w:1)
	/// The range of component `n` is `[1, 1000]`.
	fn add_node(n: u32, ) -> Weight {
		(29_766_000 as Weight)
			// Standard Error: 0
			.saturating_add((42_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: unknown [0x0150b6ff6f7d467b87a9e8030000] (r:1 w:1)
	fn follow_child_public() -> Weight {
		(79_707_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: unknown [0x0150b6ff6f7d467b87a9e8030000] (r:1 w:1)
	fn unfollow_child_public() -> Weight {
		(76_974_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: unknown [0x0153b6ff6f7d467b87a9e8030000] (r:0 w:1)
	/// The range of component `s` is `[0, 4000]`.
	fn private_graph_update(s: u32, ) -> Weight {
		(22_921_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: unknown [0x0150b239a07b522bf914e8030100] (r:1 w:1)
	// Storage: unknown [0x0150b6ff6f7d467b87a9e8030000] (r:1 w:1)
	fn change_page_number() -> Weight {
		(28_879_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Graph Nodes (r:1 w:1)
	// Storage: Graph NodeCount (r:1 w:1)
	/// The range of component `n` is `[1, 1000]`.
	fn add_node(n: u32, ) -> Weight {
		(29_766_000 as Weight)
			// Standard Error: 0
			.saturating_add((42_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: unknown [0x0150b6ff6f7d467b87a9e8030000] (r:1 w:1)
	fn follow_child_public() -> Weight {
		(79_707_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: unknown [0x0150b6ff6f7d467b87a9e8030000] (r:1 w:1)
	fn unfollow_child_public() -> Weight {
		(76_974_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: unknown [0x0153b6ff6f7d467b87a9e8030000] (r:0 w:1)
	/// The range of component `s` is `[0, 4000]`.
	fn private_graph_update(s: u32, ) -> Weight {
		(22_921_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: unknown [0x0150b239a07b522bf914e8030100] (r:1 w:1)
	// Storage: unknown [0x0150b6ff6f7d467b87a9e8030000] (r:1 w:1)
	fn change_page_number() -> Weight {
		(28_879_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
}

