//! Autogenerated weights for pallet_msa
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-22, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("frequency"), DB CACHE: 1024

// Executed Command:
// ./target/production/frequency
// benchmark
// pallet
// --pallet
// pallet_msa
// --extrinsic
// *
// --chain=frequency
// --execution
// wasm
// --wasm-execution
// compiled
// --steps
// 50
// --repeat
// 10
// --output=./pallets/msa/src/weights.rs
// --template=./.maintain/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for pallet_msa using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_msa::WeightInfo for SubstrateWeight<T> {
	// Storage: Msa MsaIdentifier (r:1 w:1)
	// Storage: Msa MessageSourceIdOf (r:1 w:1)
	// Storage: Msa MsaInfoOf (r:1 w:1)
	/// The range of component `s` is `[1, 1000]`.
	fn create(s: u32, ) -> Weight {
		(21_598_000 as Weight)
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Msa MessageSourceIdOf (r:2 w:1)
	// Storage: Msa ProviderRegistry (r:1 w:0)
	// Storage: Msa MsaIdentifier (r:1 w:1)
	// Storage: Msa MsaInfoOf (r:1 w:1)
	// Storage: Msa ProviderInfoOf (r:1 w:1)
	fn create_sponsored_account_with_delegation() -> Weight {
		(71_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Msa MessageSourceIdOf (r:1 w:0)
	// Storage: Msa ProviderInfoOf (r:1 w:1)
	/// The range of component `s` is `[5, 1005]`.
	fn revoke_delegation_by_provider(s: u32, ) -> Weight {
		(20_730_000 as Weight)
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Msa MessageSourceIdOf (r:2 w:1)
	// Storage: Msa MsaInfoOf (r:1 w:1)
	fn add_key_to_msa() -> Weight {
		(59_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Msa MessageSourceIdOf (r:2 w:1)
	// Storage: Msa MsaInfoOf (r:1 w:1)
	fn delete_msa_key() -> Weight {
		(22_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Msa MessageSourceIdOf (r:2 w:0)
	// Storage: Msa ProviderRegistry (r:1 w:0)
	// Storage: Msa ProviderInfoOf (r:1 w:1)
	fn add_provider_to_msa() -> Weight {
		(61_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Msa MessageSourceIdOf (r:1 w:0)
	// Storage: Msa ProviderInfoOf (r:1 w:1)
	fn revoke_msa_delegation_by_delegator() -> Weight {
		(17_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Msa MessageSourceIdOf (r:1 w:0)
	// Storage: Msa ProviderRegistry (r:1 w:1)
	fn register_provider() -> Weight {
		(15_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}
