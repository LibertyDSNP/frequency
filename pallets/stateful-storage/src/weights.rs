// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_stateful_storage
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-08, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("frequency-bench"), DB CACHE: 1024

// Executed Command:
// ./target/production/frequency
// benchmark
// pallet
// --pallet
// pallet_stateful-storage
// --extrinsic
// *
// --chain=frequency-bench
// --execution
// wasm
// --wasm-execution
// compiled
// --steps
// 50
// --repeat
// 10
// --output=./pallets/stateful-storage/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(
	rustdoc::all,
	missing_docs,
	unused_parens,
	unused_imports
)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_stateful_storage.
pub trait WeightInfo {
	fn apply_item_actions(n: u32, s: u32, ) -> Weight;
	fn upsert_page(n: u32, s: u32, ) -> Weight;
	fn remove_page(n: u32, ) -> Weight;
}

/// Weights for pallet_stateful_storage using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Msa PublicKeyToMsaId (r:1 w:0)
	// Storage: Schemas Schemas (r:1 w:0)
	// Storage: Msa DelegatorAndProviderToDelegation (r:1 w:0)
	// Storage: unknown [0x6400] (r:1 w:1)
	fn apply_item_actions(n: u32, s: u32, ) -> Weight {
		Weight::from_ref_time(19_119_132 as u64)
			// Standard Error: 16_247
			.saturating_add(Weight::from_ref_time(536_887 as u64).saturating_mul(n as u64))
			// Standard Error: 170
			.saturating_add(Weight::from_ref_time(5_260 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Msa PublicKeyToMsaId (r:1 w:0)
	// Storage: Schemas Schemas (r:1 w:0)
	// Storage: Msa DelegatorAndProviderToDelegation (r:1 w:0)
	// Storage: unknown [0x65000100] (r:0 w:1)
	// Storage: unknown [0x65000200] (r:0 w:1)
	// Storage: unknown [0x65000300] (r:0 w:1)
	// Storage: unknown [0x65000400] (r:0 w:1)
	// Storage: unknown [0x65000600] (r:0 w:1)
	// Storage: unknown [0x65000700] (r:0 w:1)
	// Storage: unknown [0x65000800] (r:0 w:1)
	// Storage: unknown [0x65000a00] (r:0 w:1)
	// Storage: unknown [0x65000b00] (r:0 w:1)
	// Storage: unknown [0x65000c00] (r:0 w:1)
	// Storage: unknown [0x65000d00] (r:0 w:1)
	// Storage: unknown [0x65000f00] (r:0 w:1)
	// Storage: unknown [0x65001000] (r:0 w:1)
	// Storage: unknown [0x65001100] (r:0 w:1)
	// Storage: unknown [0x65001300] (r:0 w:1)
	// Storage: unknown [0x65001400] (r:0 w:1)
	// Storage: unknown [0x65001500] (r:0 w:1)
	// Storage: unknown [0x65001600] (r:0 w:1)
	// Storage: unknown [0x65001800] (r:0 w:1)
	// Storage: unknown [0x65001900] (r:0 w:1)
	// Storage: unknown [0x65001a00] (r:0 w:1)
	// Storage: unknown [0x65001c00] (r:0 w:1)
	// Storage: unknown [0x65001d00] (r:0 w:1)
	// Storage: unknown [0x65001e00] (r:0 w:1)
	// Storage: unknown [0x65001f00] (r:0 w:1)
	// Storage: unknown [0x65002100] (r:0 w:1)
	// Storage: unknown [0x65002200] (r:0 w:1)
	// Storage: unknown [0x65002300] (r:0 w:1)
	// Storage: unknown [0x65002500] (r:0 w:1)
	// Storage: unknown [0x65002600] (r:0 w:1)
	// Storage: unknown [0x65002700] (r:0 w:1)
	// Storage: unknown [0x65002800] (r:0 w:1)
	// Storage: unknown [0x65002a00] (r:0 w:1)
	// Storage: unknown [0x65002b00] (r:0 w:1)
	// Storage: unknown [0x65002c00] (r:0 w:1)
	// Storage: unknown [0x65002e00] (r:0 w:1)
	// Storage: unknown [0x65002f00] (r:0 w:1)
	// Storage: unknown [0x65003000] (r:0 w:1)
	// Storage: unknown [0x65003100] (r:0 w:1)
	// Storage: unknown [0x65003300] (r:0 w:1)
	// Storage: unknown [0x65003400] (r:0 w:1)
	// Storage: unknown [0x65003500] (r:0 w:1)
	// Storage: unknown [0x65003700] (r:0 w:1)
	// Storage: unknown [0x65003800] (r:0 w:1)
	// Storage: unknown [0x65003900] (r:0 w:1)
	// Storage: unknown [0x65003a00] (r:0 w:1)
	// Storage: unknown [0x65003c00] (r:0 w:1)
	// Storage: unknown [0x65003d00] (r:0 w:1)
	// Storage: unknown [0x65003e00] (r:0 w:1)
	// Storage: unknown [0x65004000] (r:0 w:1)
	fn upsert_page(_n: u32, s: u32, ) -> Weight {
		Weight::from_ref_time(20_425_431 as u64)
			// Standard Error: 16
			.saturating_add(Weight::from_ref_time(414 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Msa PublicKeyToMsaId (r:1 w:0)
	// Storage: Schemas Schemas (r:1 w:0)
	// Storage: Msa DelegatorAndProviderToDelegation (r:1 w:0)
	// Storage: unknown [0x65000100] (r:0 w:1)
	// Storage: unknown [0x65000200] (r:0 w:1)
	// Storage: unknown [0x65000300] (r:0 w:1)
	// Storage: unknown [0x65000400] (r:0 w:1)
	// Storage: unknown [0x65000600] (r:0 w:1)
	// Storage: unknown [0x65000700] (r:0 w:1)
	// Storage: unknown [0x65000800] (r:0 w:1)
	// Storage: unknown [0x65000a00] (r:0 w:1)
	// Storage: unknown [0x65000b00] (r:0 w:1)
	// Storage: unknown [0x65000c00] (r:0 w:1)
	// Storage: unknown [0x65000d00] (r:0 w:1)
	// Storage: unknown [0x65000f00] (r:0 w:1)
	// Storage: unknown [0x65001000] (r:0 w:1)
	// Storage: unknown [0x65001100] (r:0 w:1)
	// Storage: unknown [0x65001300] (r:0 w:1)
	// Storage: unknown [0x65001400] (r:0 w:1)
	// Storage: unknown [0x65001500] (r:0 w:1)
	// Storage: unknown [0x65001600] (r:0 w:1)
	// Storage: unknown [0x65001800] (r:0 w:1)
	// Storage: unknown [0x65001900] (r:0 w:1)
	// Storage: unknown [0x65001a00] (r:0 w:1)
	// Storage: unknown [0x65001c00] (r:0 w:1)
	// Storage: unknown [0x65001d00] (r:0 w:1)
	// Storage: unknown [0x65001e00] (r:0 w:1)
	// Storage: unknown [0x65001f00] (r:0 w:1)
	// Storage: unknown [0x65002100] (r:0 w:1)
	// Storage: unknown [0x65002200] (r:0 w:1)
	// Storage: unknown [0x65002300] (r:0 w:1)
	// Storage: unknown [0x65002500] (r:0 w:1)
	// Storage: unknown [0x65002600] (r:0 w:1)
	// Storage: unknown [0x65002700] (r:0 w:1)
	// Storage: unknown [0x65002800] (r:0 w:1)
	// Storage: unknown [0x65002a00] (r:0 w:1)
	// Storage: unknown [0x65002b00] (r:0 w:1)
	// Storage: unknown [0x65002c00] (r:0 w:1)
	// Storage: unknown [0x65002e00] (r:0 w:1)
	// Storage: unknown [0x65002f00] (r:0 w:1)
	// Storage: unknown [0x65003000] (r:0 w:1)
	// Storage: unknown [0x65003100] (r:0 w:1)
	// Storage: unknown [0x65003300] (r:0 w:1)
	// Storage: unknown [0x65003400] (r:0 w:1)
	// Storage: unknown [0x65003500] (r:0 w:1)
	// Storage: unknown [0x65003700] (r:0 w:1)
	// Storage: unknown [0x65003800] (r:0 w:1)
	// Storage: unknown [0x65003900] (r:0 w:1)
	// Storage: unknown [0x65003a00] (r:0 w:1)
	// Storage: unknown [0x65003c00] (r:0 w:1)
	// Storage: unknown [0x65003d00] (r:0 w:1)
	// Storage: unknown [0x65003e00] (r:0 w:1)
	// Storage: unknown [0x65004000] (r:0 w:1)
	fn remove_page(n: u32, ) -> Weight {
		Weight::from_ref_time(19_976_216 as u64)
			// Standard Error: 1_050
			.saturating_add(Weight::from_ref_time(2_159 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Msa PublicKeyToMsaId (r:1 w:0)
	// Storage: Schemas Schemas (r:1 w:0)
	// Storage: Msa DelegatorAndProviderToDelegation (r:1 w:0)
	// Storage: unknown [0x6400] (r:1 w:1)
	fn apply_item_actions(n: u32, s: u32, ) -> Weight {
		Weight::from_ref_time(19_119_132 as u64)
			// Standard Error: 16_247
			.saturating_add(Weight::from_ref_time(536_887 as u64).saturating_mul(n as u64))
			// Standard Error: 170
			.saturating_add(Weight::from_ref_time(5_260 as u64).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Msa PublicKeyToMsaId (r:1 w:0)
	// Storage: Schemas Schemas (r:1 w:0)
	// Storage: Msa DelegatorAndProviderToDelegation (r:1 w:0)
	// Storage: unknown [0x65000100] (r:0 w:1)
	// Storage: unknown [0x65000200] (r:0 w:1)
	// Storage: unknown [0x65000300] (r:0 w:1)
	// Storage: unknown [0x65000400] (r:0 w:1)
	// Storage: unknown [0x65000600] (r:0 w:1)
	// Storage: unknown [0x65000700] (r:0 w:1)
	// Storage: unknown [0x65000800] (r:0 w:1)
	// Storage: unknown [0x65000a00] (r:0 w:1)
	// Storage: unknown [0x65000b00] (r:0 w:1)
	// Storage: unknown [0x65000c00] (r:0 w:1)
	// Storage: unknown [0x65000d00] (r:0 w:1)
	// Storage: unknown [0x65000f00] (r:0 w:1)
	// Storage: unknown [0x65001000] (r:0 w:1)
	// Storage: unknown [0x65001100] (r:0 w:1)
	// Storage: unknown [0x65001300] (r:0 w:1)
	// Storage: unknown [0x65001400] (r:0 w:1)
	// Storage: unknown [0x65001500] (r:0 w:1)
	// Storage: unknown [0x65001600] (r:0 w:1)
	// Storage: unknown [0x65001800] (r:0 w:1)
	// Storage: unknown [0x65001900] (r:0 w:1)
	// Storage: unknown [0x65001a00] (r:0 w:1)
	// Storage: unknown [0x65001c00] (r:0 w:1)
	// Storage: unknown [0x65001d00] (r:0 w:1)
	// Storage: unknown [0x65001e00] (r:0 w:1)
	// Storage: unknown [0x65001f00] (r:0 w:1)
	// Storage: unknown [0x65002100] (r:0 w:1)
	// Storage: unknown [0x65002200] (r:0 w:1)
	// Storage: unknown [0x65002300] (r:0 w:1)
	// Storage: unknown [0x65002500] (r:0 w:1)
	// Storage: unknown [0x65002600] (r:0 w:1)
	// Storage: unknown [0x65002700] (r:0 w:1)
	// Storage: unknown [0x65002800] (r:0 w:1)
	// Storage: unknown [0x65002a00] (r:0 w:1)
	// Storage: unknown [0x65002b00] (r:0 w:1)
	// Storage: unknown [0x65002c00] (r:0 w:1)
	// Storage: unknown [0x65002e00] (r:0 w:1)
	// Storage: unknown [0x65002f00] (r:0 w:1)
	// Storage: unknown [0x65003000] (r:0 w:1)
	// Storage: unknown [0x65003100] (r:0 w:1)
	// Storage: unknown [0x65003300] (r:0 w:1)
	// Storage: unknown [0x65003400] (r:0 w:1)
	// Storage: unknown [0x65003500] (r:0 w:1)
	// Storage: unknown [0x65003700] (r:0 w:1)
	// Storage: unknown [0x65003800] (r:0 w:1)
	// Storage: unknown [0x65003900] (r:0 w:1)
	// Storage: unknown [0x65003a00] (r:0 w:1)
	// Storage: unknown [0x65003c00] (r:0 w:1)
	// Storage: unknown [0x65003d00] (r:0 w:1)
	// Storage: unknown [0x65003e00] (r:0 w:1)
	// Storage: unknown [0x65004000] (r:0 w:1)
	fn upsert_page(_n: u32, s: u32, ) -> Weight {
		Weight::from_ref_time(20_425_431 as u64)
			// Standard Error: 16
			.saturating_add(Weight::from_ref_time(414 as u64).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Msa PublicKeyToMsaId (r:1 w:0)
	// Storage: Schemas Schemas (r:1 w:0)
	// Storage: Msa DelegatorAndProviderToDelegation (r:1 w:0)
	// Storage: unknown [0x65000100] (r:0 w:1)
	// Storage: unknown [0x65000200] (r:0 w:1)
	// Storage: unknown [0x65000300] (r:0 w:1)
	// Storage: unknown [0x65000400] (r:0 w:1)
	// Storage: unknown [0x65000600] (r:0 w:1)
	// Storage: unknown [0x65000700] (r:0 w:1)
	// Storage: unknown [0x65000800] (r:0 w:1)
	// Storage: unknown [0x65000a00] (r:0 w:1)
	// Storage: unknown [0x65000b00] (r:0 w:1)
	// Storage: unknown [0x65000c00] (r:0 w:1)
	// Storage: unknown [0x65000d00] (r:0 w:1)
	// Storage: unknown [0x65000f00] (r:0 w:1)
	// Storage: unknown [0x65001000] (r:0 w:1)
	// Storage: unknown [0x65001100] (r:0 w:1)
	// Storage: unknown [0x65001300] (r:0 w:1)
	// Storage: unknown [0x65001400] (r:0 w:1)
	// Storage: unknown [0x65001500] (r:0 w:1)
	// Storage: unknown [0x65001600] (r:0 w:1)
	// Storage: unknown [0x65001800] (r:0 w:1)
	// Storage: unknown [0x65001900] (r:0 w:1)
	// Storage: unknown [0x65001a00] (r:0 w:1)
	// Storage: unknown [0x65001c00] (r:0 w:1)
	// Storage: unknown [0x65001d00] (r:0 w:1)
	// Storage: unknown [0x65001e00] (r:0 w:1)
	// Storage: unknown [0x65001f00] (r:0 w:1)
	// Storage: unknown [0x65002100] (r:0 w:1)
	// Storage: unknown [0x65002200] (r:0 w:1)
	// Storage: unknown [0x65002300] (r:0 w:1)
	// Storage: unknown [0x65002500] (r:0 w:1)
	// Storage: unknown [0x65002600] (r:0 w:1)
	// Storage: unknown [0x65002700] (r:0 w:1)
	// Storage: unknown [0x65002800] (r:0 w:1)
	// Storage: unknown [0x65002a00] (r:0 w:1)
	// Storage: unknown [0x65002b00] (r:0 w:1)
	// Storage: unknown [0x65002c00] (r:0 w:1)
	// Storage: unknown [0x65002e00] (r:0 w:1)
	// Storage: unknown [0x65002f00] (r:0 w:1)
	// Storage: unknown [0x65003000] (r:0 w:1)
	// Storage: unknown [0x65003100] (r:0 w:1)
	// Storage: unknown [0x65003300] (r:0 w:1)
	// Storage: unknown [0x65003400] (r:0 w:1)
	// Storage: unknown [0x65003500] (r:0 w:1)
	// Storage: unknown [0x65003700] (r:0 w:1)
	// Storage: unknown [0x65003800] (r:0 w:1)
	// Storage: unknown [0x65003900] (r:0 w:1)
	// Storage: unknown [0x65003a00] (r:0 w:1)
	// Storage: unknown [0x65003c00] (r:0 w:1)
	// Storage: unknown [0x65003d00] (r:0 w:1)
	// Storage: unknown [0x65003e00] (r:0 w:1)
	// Storage: unknown [0x65004000] (r:0 w:1)
	fn remove_page(n: u32, ) -> Weight {
		Weight::from_ref_time(19_976_216 as u64)
			// Standard Error: 1_050
			.saturating_add(Weight::from_ref_time(2_159 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
}
